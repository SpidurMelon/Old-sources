gravity changer

package nl.entities;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.KeyEvent;

import nl.game.GamePanel;
import nl.gamestate.GameState;
import nl.objects.Block;
import nl.physics.Collision;

public class Player {
	private static final long serialVersionUID = 1L;
	
	
	
	public boolean right = false, left = false, jumping = false, falling = false;
	public boolean bottomCollision = false;
	public boolean gravityDown = true, gravityUp = false;
	public boolean bob = false;
	
	private double x, y;
	private int width, height;
	
	private double moveSpeed = 2.5;
	
	private double jumpSpeed = 4;
	private double currentJumpSpeed = jumpSpeed;
	
	private double maxFallSpeed = 5;
	private double currentFallSpeed = 0.1;
	
	public Player(int width, int height) {
		x = GamePanel.WIDTH / 2;
		y = GamePanel.HEIGHT / 2;
		this.height = height;
		this.width = width;
	}
	
	public void tick(Block[][] b) {
		
		
		int iX = (int)x;
		int iY = (int)y;
		
		
		if (gravityDown) {
		for (int i = 0; i < b.length; i++) {
			for(int j = 0; j < b[0].length; j++) {
						if (b[i][j].getID() != 0) {
			
						// right
						if(Collision.playerBlock(new Point(iX + width + (int)GameState.xOffset + 2, iY + (int)GameState.yOffset + 2), b[i][j]) 
								|| Collision.playerBlock(new Point(iX + width + (int)GameState.xOffset + 2, iY + height + (int)GameState.yOffset - 1), b[i][j])) {
							right = false;
							
						}

						// left
						if(Collision.playerBlock(new Point(iX + (int)GameState.xOffset - 1, iY + (int)GameState.yOffset + 2), b[i][j])
								|| Collision.playerBlock(new Point(iX + (int)GameState.xOffset - 1, iY + height + (int)GameState.yOffset - 1), b[i][j])) {
							left = false;
						}

						// top
						if(Collision.playerBlock(new Point(iX + (int)GameState.xOffset + 1, iY + (int)GameState.yOffset), b[i][j]) ||
								Collision.playerBlock(new Point(iX + width + (int)GameState.xOffset - 1, iY + (int)GameState.yOffset), b[i][j])) {
							jumping = false;
							falling = true;
						}

						// bottom
						if(Collision.playerBlock(new Point(iX + (int)GameState.xOffset + 2, iY + height + (int)GameState.yOffset + 1), b[i][j]) ||
								Collision.playerBlock(new Point(iX + width + (int)GameState.xOffset - 1,  iY + height + (int)GameState.yOffset + 1), b[i][j])) {
							y = b[i][j].getY() - (int)GameState.yOffset - height;
							falling = false;
							bottomCollision = true;
						} else {
						if(!bottomCollision && !jumping) {
								falling = true;
							}
							
						}
						}
						}
					}
					bottomCollision = false;
		}
		if (gravityUp) {
			for (int i = 0; i < b.length; i++) {
				for(int j = 0; j < b[0].length; j++) {
							if (b[i][j].getID() != 0) {
				
							// right
								if(Collision.playerBlock(new Point(iX + width + (int)GameState.xOffset + 2, iY + (int)GameState.yOffset + 2), b[i][j]) 
										|| Collision.playerBlock(new Point(iX + width + (int)GameState.xOffset + 2, iY + height + (int)GameState.yOffset - 1), b[i][j])) {
									right = false;
									
								}

								// left
								if(Collision.playerBlock(new Point(iX + (int)GameState.xOffset - 1, iY + (int)GameState.yOffset + 2), b[i][j])
										|| Collision.playerBlock(new Point(iX + (int)GameState.xOffset - 1, iY + height + (int)GameState.yOffset - 1), b[i][j])) {
									left = false;
								}

							// top
							if(Collision.playerBlock(new Point(iX + (int)GameState.xOffset + 1, iY + (int)GameState.yOffset), b[i][j]) ||
									Collision.playerBlock(new Point(iX + width + (int)GameState.xOffset - 1, iY + (int)GameState.yOffset), b[i][j])) {
								
								falling = false;
								if (bob) {
								bottomCollision = true;
								}
								bob = true;
							}

							// bottom
							if(Collision.playerBlock(new Point(iX + (int)GameState.xOffset + 2, iY + height + (int)GameState.yOffset + 1), b[i][j]) ||
									Collision.playerBlock(new Point(iX + width + (int)GameState.xOffset - 1,  iY + height + (int)GameState.yOffset + 1), b[i][j])) {
								y = b[i][j].getY() - (int)GameState.yOffset - height;
								
								jumping = false;
								falling = true;
							} else {
							if(!bottomCollision && !jumping) {
									falling = true;
								}
								
							}
							}
							}
						}
						bottomCollision = false;
			}
	
		
		
		if (left) {
			GameState.xOffset -= moveSpeed;
		}
		if (right) {
			GameState.xOffset += moveSpeed;
		}
		
		
		
		if (gravityDown) {
		if (jumping) {
			GameState.yOffset -= currentJumpSpeed;
			
			currentJumpSpeed -= .1;
			
			if (currentJumpSpeed <= 0) {
				currentJumpSpeed = jumpSpeed;
				jumping = false;
				falling = true;
			}
			
			
			
			
		}
		if (falling) {
			GameState.yOffset += 5;
			
			
			if (currentFallSpeed < maxFallSpeed) {
				currentFallSpeed += .1;
			}
		}
		
		if (!falling) {
			currentFallSpeed = .1;
		
		}
		}
		
		
		
		
		if (gravityUp) {

			if (jumping) {
				GameState.yOffset += currentJumpSpeed;
				
				currentJumpSpeed -= .1;
				
				if (currentJumpSpeed <= 0) {
					currentJumpSpeed = jumpSpeed;
					jumping = false;
					falling = true;
				}
				
				
				
				
			}
			if (falling) {
				GameState.yOffset -= currentFallSpeed;
				
				
				if (currentFallSpeed < maxFallSpeed) {
					currentFallSpeed += .1;
				}
			}
			
			if (!falling) {
				currentFallSpeed = .1;
			
			}
			
		}
	}
	
	public void draw(Graphics g) {
		g.setColor(Color.RED);
		g.fillRect((int)x, (int)y, width, height);
		g.setColor(Color.GREEN);
		g.drawRect((int)x, (int)y, width, height);
		g.setColor(Color.BLUE);
	}
	
	public void keyPressed(int k) {
		if (k == KeyEvent.VK_UP && !jumping && !falling) {
			gravityUp = true;
			gravityDown = false;
			
		}
		if (k == KeyEvent.VK_DOWN && !jumping && !falling) {
			gravityUp = false;
			gravityDown = true;
		}
		if (k == KeyEvent.VK_A) left = true;
		if (k == KeyEvent.VK_D) right = true;
		if (k == KeyEvent.VK_SPACE && !jumping && !falling) jumping = true;
		if (k == KeyEvent.VK_R) {
			GameState.xOffset = -240;
			GameState.yOffset = 0;
		}
	}
	
	public void keyReleased(int k) {
		if (k == KeyEvent.VK_A) left = false;
		if (k == KeyEvent.VK_D) right = false;
	}
}
